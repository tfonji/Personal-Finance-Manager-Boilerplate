/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.pfm.controller;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.pfm.dto.Investor;
import com.pfm.dto.InvestorName;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.io.IOException;
import java.util.List;
@javax.annotation.Generated(value = "com.pfm.codegen.languages.SpringCodegen", date = "2018-05-19T00:16:19.389Z")

@Api(value = "investor", description = "the investor API")
public interface InvestorApi {

    @ApiOperation(value = "find all investors.", nickname = "investorAllGet", notes = "retrieve all investors. this will include personal information and portfolio information for each investor.", response = Investor.class, responseContainer = "List", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "investor information successfully retrieved.", response = Investor.class, responseContainer = "List") })
    @RequestMapping(value = "/investor/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Investor>> investorAllGet();


    @ApiOperation(value = "delete investor.", nickname = "investorDeleteDelete", notes = "delete an existing investor by specifying an investor_id.", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "investor successfully delelted from database.") })
    @RequestMapping(value = "/investor/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> investorDeleteDelete(@ApiParam(value = "investor to delete from database." ,required=true )  @Valid @RequestBody String body);


    @ApiOperation(value = "find an investor.", nickname = "investorGet", notes = "retrieve an investor's personal information and portfolio by specifying an investor_id.", response = Investor.class, tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "investor information successfully retrieved.", response = Investor.class) })
    @RequestMapping(value = "/investor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Investor> investorGet(@ApiParam(value = "id for investor for whom information is to be retrieved." ,required=true )  @Valid @RequestBody String body);


    @ApiOperation(value = "add a new investor.", nickname = "investorNewPost", notes = "add a new investor to the database. first_name and last_name are the only required fields.", response = Investor.class, tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "investor information successfully added to database.", response = Investor.class) })
    @RequestMapping(value = "/investor/new",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> investorNewPost(@ApiParam(value = "investor object to add to database." ,required=true )  @Valid @RequestBody InvestorName body) throws IOException;

}
